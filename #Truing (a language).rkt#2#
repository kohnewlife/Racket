#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.5 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 23 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 748 0 29 3 11 #"#lang plait"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; abstract syntax for Truing language"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"tru-value"
0 0 25 3 2 #" ["
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 3 3 #"]) "
0 0 17 3 7 #"; value"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"tru-and"
0 0 25 3 4 #"   ["
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 3 #"] ["
0 0 14 3 3 #"rhs"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 3 #"]) "
0 0 17 3 5 #"; AND"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"tru-or"
0 0 25 3 5 #"    ["
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 3 #"] ["
0 0 14 3 3 #"rhs"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 3 #"]) "
0 0 17 3 4 #"; OR"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"tru-not"
0 0 25 3 4 #"   ["
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 4 #"])) "
0 0 17 3 5 #"; NOT"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 2 #" ["
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 7 #"TruExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"tru-and"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 3 #") ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"tru-or"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 4 #")  ("
0 0 14 3 2 #"or"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 3 #") ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"tru-not"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 6 #")    ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 16 #"sample-tru-value"
0 0 25 3 2 #" ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"sample-tru-and"
0 0 25 3 4 #"   ("
0 0 14 3 7 #"tru-and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"tru-and"
0 0 25 3 2 #" ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"sample-tru-or"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"tru-or"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"tru-or"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"sample-tru-not"
0 0 25 3 4 #"   ("
0 0 14 3 7 #"tru-not"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 6 #"tru-or"
0 0 25 3 2 #" ("
0 0 14 3 6 #"tru-or"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                  ("
0 0 14 3 7 #"tru-and"
0 0 25 3 2 #" ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 9 #"tru-value"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 16 #"sample-tru-value"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 14 #"sample-tru-and"
0 0 25 3 4 #")   "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 13 #"sample-tru-or"
0 0 25 3 5 #")    "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 13 #"tru-interpret"
0 0 25 3 1 #" "
0 0 14 3 14 #"sample-tru-not"
0 0 25 3 4 #")   "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; concrete syntax for Truing language"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; #t | #f"
0 0 25 29 1 #"\n"
0 0 17 3 11 #"; {& #t #f}"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; {||  #f #t}"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; {! #t}"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; {& {||  #t #f} #f}"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; {! {& #t {||  #f #t}}}"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; (E)BNF (Extended) Backus-Naur Form"
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; <expression> ::= <value> | <and> | <or> | <not>"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; <value> ::= \"#t\" | \"#f\""
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; <and> ::= \""
0 0 17 3 1 #"{"
0 0 17 3 35 #"\" \"&\" <expression> <expression> \"}\""
0 0 25 29 1 #"\n"
0 0 17 3 49 #"; <or> ::= \"{\" \"||\" <expression> <expression> \"}\""
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; <not> ::= \""
0 0 17 3 23 #"{\" \"!\" <expression> \"}\""
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 2 #" ["
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 3 #"]) "
0 0 17 3 9 #"; literal"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"truing-append"
0 0 25 3 2 #" ["
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 3 3 #"] ["
0 0 14 3 3 #"rhs"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 3 3 #"]) "
0 0 17 3 21 #"; (string-append a b)"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"truing-reverse"
0 0 25 3 2 #" ["
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 3 4 #"])) "
0 0 17 3 18 #"; (rope-reverse s)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 21 #"sample-truing-literal"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"hello"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 20 #"sample-truing-append"
0 0 25 3 2 #" ("
0 0 14 3 13 #"truing-append"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Hello "
0 0 19 3 1 #"\""
0 0 25 3 3 #") ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"world!"
0 0 19 3 1 #"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 21 #"sample-truing-reverse"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-reverse"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"radar"
0 0 19 3 1 #"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 20 #"sample-truing-nested"
0 0 25 3 2 #" ("
0 0 14 3 13 #"truing-append"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-reverse"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"olleh"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 41 #"                                        ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #" there"
0 0 19 3 1 #"\""
0 0 25 3 4 #"))) "
0 0 17 3 5 #"; AST"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 2 #" ["
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 2 #") "
0 0 14 3 3 #"str"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 13 #"truing-append"
0 0 25 3 1 #" "
0 0 14 3 3 #"lsh"
0 0 25 3 1 #" "
0 0 14 3 3 #"rsh"
0 0 25 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"lsh"
0 0 25 3 3 #") ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"rsh"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 14 #"truing-reverse"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 12 #"list->string"
0 0 25 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 25 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 8 #")))) ]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 21 #"sample-truing-literal"
0 0 25 3 2 #") "
0 0 19 3 6 #"\"hello"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 20 #"sample-truing-append"
0 0 25 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Hello"
0 0 19 3 7 #" world!"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 21 #"sample-truing-reverse"
0 0 25 3 2 #") "
0 0 19 3 6 #"\"radar"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 16 #"truing-interpret"
0 0 25 3 1 #" "
0 0 14 3 20 #"sample-truing-nested"
0 0 25 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 5 #"hello"
0 0 19 3 6 #" there"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; concrete syntax for Truing language"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; \"hello\""
0 0 25 29 1 #"\n"
0 0 17 3 11 #"; {+ \"hello"
0 0 17 3 3 #"\" \""
0 0 17 3 7 #"there\"}"
0 0 25 29 1 #"\n"
0 0 17 3 6 #"; {& \""
0 0 17 3 9 #"racecar\"}"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; {& {+ \""
0 0 17 3 5 #"ab\" \""
0 0 17 3 5 #"cd\"}}"
0 0 25 29 1 #"\n"
0 0 17 3 9 #"; {+ {& \""
0 0 17 3 2 #"ab"
0 0 17 3 8 #"\"} \"ck\"}"
0 0 25 29 1 #"\n"
0 0 17 3 36 #"; (E)BNF (Extended) Backus-Naur Form"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; <expression> ::= <literal> | <append> | <reverse>"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; <character> ::= \""
0 0 17 3 1 #"A"
0 0 17 3 5 #"\" | \""
0 0 17 3 6 #"B\" | \""
0 0 17 3 1 #"C"
0 0 17 3 7 #"\" ... \""
0 0 17 3 1 #"a"
0 0 17 3 5 #"\" | \""
0 0 17 3 1 #"b"
0 0 17 3 5 #"\" | \""
0 0 17 3 6 #"c\" ..."
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; <literal> ::= \""
0 0 17 3 2 #"\\\""
0 0 17 3 16 #"\" <character>* \""
0 0 17 3 3 #"\\\"\""
0 0 25 29 1 #"\n"
0 0 17 3 16 #"; <append> ::= \""
0 0 17 3 1 #"{"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"+"
0 0 17 3 29 #"\" <expression> <expression> \""
0 0 17 3 2 #"}\""
0 0 25 29 1 #"\n"
0 0 17 3 17 #"; <reverse> ::= \""
0 0 17 3 1 #"{"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"&"
0 0 17 3 18 #"\" <expression> \"}\""
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 2 #" ["
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"S-Exp"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 10 #"TruingExpr"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 14 3 6 #"String"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 8 #")      ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->string"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 25 3 1 #"{"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 25 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 25 3 2 #"} "
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 13 #"truing-append"
0 0 25 3 2 #" ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 25 3 1 #"{"
0 0 14 3 1 #"&"
0 0 25 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 25 3 2 #"} "
0 0 14 3 1 #"s"
0 0 25 3 9 #")       ("
0 0 14 3 14 #"truing-reverse"
0 0 25 3 2 #" ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 7 #"))))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 19 3 6 #"\"hello"
0 0 19 3 1 #"\""
0 0 25 3 3 #") ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"hello"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 19 3 2 #"\"\""
0 0 25 3 3 #") ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 12 #"truing-parse"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 25 3 1 #"{"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 25 3 2 #"})"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"truing-append"
0 0 25 3 2 #" ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 14 #"truing-literal"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"b\""
0 0 25 3 3 #")))"
0           0
